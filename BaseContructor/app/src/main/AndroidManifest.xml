<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.iblogstreet.basecontructor">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <!-- Activity 一共有以下四种 launchMode：standard、singleTop、singleTask、singleInstance
      standard 启动模式，不管有没有已存在的实例，都生成新的实例。
      singleTop 启动模式，如果发现有对应的 Activity 实例正位于栈顶，则重复利用，不再生成新的实例。
      singleTask 模式，如果发现有对应的 Activity 实例，则使此 Activity 实例之上的其他 Activity 实
例统统出栈，使此 Activity 实例成为栈顶对象，显示到屏幕前
singleInstance这种启动模式比较特殊，因为它会启用一个新的栈结构，将 Activity 放置于这个新的栈结构中，并保
证不再有其他 Activity 实例进入-->
        <!--
        横竖屏切换时 Activity 的生命周期
        Android 手机在横竖屏切换时，默认情况下会把 Activity 先销毁再创建，其生命周期如图 1-14。模拟
器横竖屏切换的快捷键是 Ctrl+F11。
不让 Activity 在横竖屏切换时销
毁，只需要在清单文件声明 Activity 时配置<activity>节点的几个属性即可，其方式如下：
   4.0 以下版本 android:configChanges="orientation|keyboardHidden"
   4.0 以上版本 android:configChanges="orientation|keyboardHidden|screenSize" -->
        <!--
        固定 Activity 的方向
        1、通过配置文件
在 AndroidManifest.xml 中的 activity 节点中添加如下属性。
android:screenOrientation="portrait"
该属性通常有两个常量值，portrait：垂直方向，landscape：水平方向。
    2、通过代码
    在 Activity 的 onCreate 方法中执行如下方法
    //垂直方向
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
    //水平方向
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        -->
        <activity
            android:name=".activity.MainActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity
            android:name=".activity.layout_total"
            android:label="@string/title_activity_layout_total"
            android:theme="@style/AppTheme.NoActionBar"></activity>
        <activity
            android:name=".activity.layout_line1"
            android:label="@string/title_activity_layout_total"
            android:theme="@style/AppTheme.NoActionBar"></activity>
        <activity
            android:name=".activity.layout_relative1"
            android:label="@string/title_activity_layout_total"
            android:theme="@style/AppTheme.NoActionBar"></activity>
        <activity
            android:name=".activity.layout_frame1"
            android:label="@string/title_activity_layout_total"
            android:theme="@style/AppTheme.NoActionBar"></activity>
        <activity
            android:name=".activity.ListViewActivity"
            android:label="@string/title_activity_layout_total"
            android:theme="@style/AppTheme.NoActionBar"></activity>
        <activity
            android:name=".activity.network.NetSourcecodeActivity"
            android:label="@string/title_activity_layout_total"
            android:theme="@style/AppTheme.NoActionBar"></activity>
        <activity
            android:name=".activity.MyActivity"
            android:label="@string/title_activity_layout_total"
            android:theme="@style/AppTheme.NoActionBar"></activity>
        <activity
            android:name=".activity.layout_function_total"
            android:label="@string/title_activity_layout_total"
            android:theme="@style/AppTheme.NoActionBar"></activity>
        <activity
            android:name=".activity.network.NetworkNewsActivity"
            android:label="@string/title_activity_layout_total"
            android:theme="@style/AppTheme.NoActionBar"></activity>
        <activity android:name=".activity.network.MulDownActivity"></activity>
        <activity
            android:name=".activity.sendmessage.ContactsActivity"
            android:label="@string/title_activity_layout_total"
            android:theme="@style/AppTheme.NoActionBar"></activity>
        <activity
            android:name=".activity.sendmessage.ContentActivity"
            android:label="@string/title_activity_layout_total"

            android:theme="@style/AppTheme.NoActionBar"></activity>
        <activity
            android:name=".activity.sendmessage.SendMessageActivity"
            android:label="@string/title_activity_layout_total"
            android:theme="@style/AppTheme.NoActionBar"></activity>
        <!--广播接收者 -->
        <!-- BroadCastReceiver 的注册方式有两种：1、静态注册（就是通过 AndroidManifest.xml 注册）2、动态注
册（就是通过代码注册）-->
        <!-- IP播号-->
        <receiver android:name=".broadcast.IPCallerReceiver">
            <intent-filter>
                <action android:name="android.intent.action.NEW_OUTGOING_CALL"></action>
            </intent-filter>
        </receiver>
        <!--短信接收者 -->
        <receiver android:name=".broadcast.SmsListenerReceiver">
            <intent-filter android:priority="1000">
                <action android:name="android.provider.Telephony.SMS_Receiver">
                </action>
            </intent-filter>
        </receiver>
        <!-- 包的监听 -->
        <receiver android:name=".broadcast.PackageStateReceiver">
            <intent-filter>
                <data android:scheme="package"/>
                <action android:name="android.intent.action.PACKAGE_REMOVED"/>
                <action android:name="android.intent.action.PACKAGE_ADDED"/>
            </intent-filter>
        </receiver>

        <!-- 自定义无序广播-->
        <receiver android:name=".broadcast.DisorderReceiver">
            <intent-filter>
                <action android:name="com.iblogstreet.disorderbroadcast"></action>
            </intent-filter>
        </receiver>
        <!--自定义有序广播-->
        <receiver android:name=".broadcast.OrderReceiver">
            <intent-filter android:priority="300">
                <action android:name="com.iblogstreet.orderbroadcast"></action>
            </intent-filter>
        </receiver>
        <receiver android:name=".broadcast.OrderReceiverOne">
            <intent-filter android:priority="400">
                <action android:name="com.iblogstreet.orderbroadcast"></action>
            </intent-filter>
        </receiver>
        <receiver android:name=".broadcast.OrderReceiverTwo">
            <intent-filter android:priority="400">
                <action android:name="com.iblogstreet.orderbroadcast"></action>
            </intent-filter>
        </receiver>
        <!--服务 -->
        <!-- 注册 Service-->
        <service android:name=".Service.CallListenerService"/>

        <uses-library android:name="android.test.runner">


        </uses-library>

        <!-- ATTENTION: This was auto-generated to add Google Play services to your project for
             App Indexing.  See https://g.co/AppIndexing/AndroidStudio for more information. -->
        <meta-data
            android:name="com.google.android.gms.version"
            android:value="@integer/google_play_services_version" />
    </application>

    <instrumentation
        android:name="android.test.InstrumentationTestRunner"
        android:targetPackage="com.iblogstreet.basecontructor.junit_test"></instrumentation>
    <!-- 权限配制开始-->
    <!-- 网络权限配制开始-->
    <uses-permission android:name="android.permission.INTERNET" />
    <!-- 网络权限配制结束-->
    <!-- 允许应用程序监听、控制、取消呼出电话的权限开始-->
    <uses-permission android:name="android.permission.PROCESS_OUTGOING_CALLS" />
    <!--允许应用程序监听、控制、取消呼出电话的权限结束 -->
    <!--短信接收者 -->
    <uses-permission android:name="android.permission.RECEIVE_SMS"/>
    <!--写外存的权限 -->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
    <!--录音的权限 -->
    <uses-permission android:name="android.permission.RECORD_AUDIO"/>
    <!--读取电话状态的权限 -->
    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>
    <!-- 权限配制结束-->
</manifest>
